#!/usr/bin/env node

const cluster = require('cluster');
const mongo = require('../lib/database');

if (cluster.isMaster) {
  // Count the machine's CPUs
  let cpuCount = require('os').cpus().length;

  // Create a worker for each CPU
  for (let i = 0; i < cpuCount; i += 1) {
      cluster.fork();
  }
} else {
  // Sets up the required variables to run the server with its config
  const app = require('../server.js');
  const http = require('http');
  // Require the logger
  const logger = require('../lib/logger/index.js');

  // Set the port to the ENV variable or use 4040 as default
  const port = process.env.PORT;
  app.set('port', port);

  // create the actual server using our app
  const server = http.createServer(app);


  /*
    Event listener for handling errors with the HTTP Server.
  */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string' ? `Pipe: ${port}` : `Port: ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        logger.error(`${bind} requires elevated privileges.`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        logger.error(`${bind} is already in use.`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /*
    Event listener for HTTP server "listening" event.
  */
  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe: ${addr}` : `port: ${addr.port}`;
    logger.info(`Listening on ${bind}`);
  }

  mongo.connect()
    .then((client) => {
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    });
}

// Listen for dying workers
cluster.on('exit', function (worker) {

    // Replace the dead worker,
    // we're not sentimental
    console.log('Worker %d died :(', worker.id);
    cluster.fork();

});
